/*L
 *  Copyright SAIC
 *  Copyright SAIC-Frederick
 *
 *  Distributed under the OSI-approved BSD 3-Clause License.
 *  See http://ncip.github.com/cananolab/LICENSE.txt for details.
 */

package gov.nih.nci.cagrid.cananolab.common;

import java.rmi.RemoteException;

/**
 * This class is autogenerated, DO NOT EDIT.
 *
 * This interface represents the API which is accessable on the grid service from the client.
 *
 * @created by Introduce Toolkit version 1.3
 *
 */
public interface CaNanoLabServiceI {

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException ;

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException ;

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException ;

  /**
   * The standard caGrid Data Service query method.
   *
   * @param cqlQuery
   *	The CQL query to be executed against the data source.
   * @return The result of executing the CQL query against the data source.
   * @throws QueryProcessingException
   *	Thrown when an error occurs in processing a CQL query
   * @throws MalformedQueryException
   *	Thrown when a query is found to be improperly formed
   */
  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType ;

  public gov.nih.nci.cananolab.domain.common.Finding[] getFindingsByCharacterizationId(java.lang.String charId) throws RemoteException ;

  public gov.nih.nci.cananolab.domain.common.ExperimentConfig[] getExperimentConfigsByCharacterizationId(java.lang.String charId) throws RemoteException ;

  public gov.nih.nci.cananolab.domain.common.Keyword[] getKeywordsBySampleId(java.lang.String sampleId) throws RemoteException ;

  public gov.nih.nci.cananolab.domain.common.File[] getFilesByCompositionInfoId(java.lang.String id,java.lang.String className) throws RemoteException ;

  public gov.nih.nci.cananolab.domain.common.Protocol getProtocolByCharacterizationId(java.lang.String charId) throws RemoteException ;

  public java.lang.String[] getSampleIds(java.lang.String sampleName, java.lang.String samplePointOfContact,java.lang.String[] nanomaterialEntityClassNames,java.lang.String[] functionalizingEntityClassNames,java.lang.String[] functionClassNames,java.lang.String[] characterizationClassNames,java.lang.String[] words) throws RemoteException ;

  public java.lang.String[] getPublicationIdsBy(java.lang.String publicationTitle,java.lang.String publicationCategory,java.lang.String sampleName,java.lang.String[] researchAreas,java.lang.String[] keywords,java.lang.String pubMedId,java.lang.String digitalObjectId,java.lang.String[] authors,java.lang.String[] nanomaterialEntityClassNames,java.lang.String[] functionalizingEntityClassNames,java.lang.String[] functionClassNames) throws RemoteException ;

  public gov.nih.nci.cananolab.domain.common.PointOfContact[] getOtherPointOfContactsBySampleId(java.lang.String sampleId) throws RemoteException ;

  public java.lang.String[] getSampleNamesByPublicationId(java.lang.String publicationId) throws RemoteException ;

  public gov.nih.nci.cananolab.domain.common.Publication[] getPublicationsBySampleId(java.lang.String sampleId) throws RemoteException ;

  public gov.nih.nci.cananolab.domain.common.PointOfContact getPrimaryPointOfContactBySampleId(java.lang.String sampleId) throws RemoteException ;

  public java.lang.String[] getSampleViewStrs(java.lang.String sampleName) throws RemoteException ;

  public gov.nih.nci.cananolab.domain.common.File getFileByProtocolId(java.lang.String protocolId) throws RemoteException ;

}

