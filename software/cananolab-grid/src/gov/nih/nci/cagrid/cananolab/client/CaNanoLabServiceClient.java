/*L
 *  Copyright SAIC
 *  Copyright SAIC-Frederick
 *
 *  Distributed under the OSI-approved BSD 3-Clause License.
 *  See http://ncip.github.com/cananolab/LICENSE.txt for details.
 */

package gov.nih.nci.cagrid.cananolab.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.cananolab.stubs.CaNanoLabServicePortType;
import gov.nih.nci.cagrid.cananolab.stubs.service.CaNanoLabServiceAddressingLocator;
import gov.nih.nci.cagrid.cananolab.common.CaNanoLabServiceI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.3
 */
public class CaNanoLabServiceClient extends CaNanoLabServiceClientBase implements CaNanoLabServiceI {

	public CaNanoLabServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);
	}

	public CaNanoLabServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}

	public CaNanoLabServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}

	public CaNanoLabServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CaNanoLabServiceClient.class.getName() + " -url <service url>");
	}

	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CaNanoLabServiceClient client = new CaNanoLabServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"query");
    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
    return boxedResult.getCQLQueryResultCollection();
    }
  }

  public gov.nih.nci.cananolab.domain.common.Finding[] getFindingsByCharacterizationId(java.lang.String charId) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFindingsByCharacterizationId");
    gov.nih.nci.cagrid.cananolab.stubs.GetFindingsByCharacterizationIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetFindingsByCharacterizationIdRequest();
    params.setCharId(charId);
    gov.nih.nci.cagrid.cananolab.stubs.GetFindingsByCharacterizationIdResponse boxedResult = portType.getFindingsByCharacterizationId(params);
    return boxedResult.getFinding();
    }
  }

  public gov.nih.nci.cananolab.domain.common.ExperimentConfig[] getExperimentConfigsByCharacterizationId(java.lang.String charId) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getExperimentConfigsByCharacterizationId");
    gov.nih.nci.cagrid.cananolab.stubs.GetExperimentConfigsByCharacterizationIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetExperimentConfigsByCharacterizationIdRequest();
    params.setCharId(charId);
    gov.nih.nci.cagrid.cananolab.stubs.GetExperimentConfigsByCharacterizationIdResponse boxedResult = portType.getExperimentConfigsByCharacterizationId(params);
    return boxedResult.getExperimentConfig();
    }
  }

  public gov.nih.nci.cananolab.domain.common.Keyword[] getKeywordsBySampleId(java.lang.String sampleId) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getKeywordsBySampleId");
    gov.nih.nci.cagrid.cananolab.stubs.GetKeywordsBySampleIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetKeywordsBySampleIdRequest();
    params.setSampleId(sampleId);
    gov.nih.nci.cagrid.cananolab.stubs.GetKeywordsBySampleIdResponse boxedResult = portType.getKeywordsBySampleId(params);
    return boxedResult.getKeyword();
    }
  }

  public gov.nih.nci.cananolab.domain.common.File[] getFilesByCompositionInfoId(java.lang.String id,java.lang.String className) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFilesByCompositionInfoId");
    gov.nih.nci.cagrid.cananolab.stubs.GetFilesByCompositionInfoIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetFilesByCompositionInfoIdRequest();
    params.setId(id);
    params.setClassName(className);
    gov.nih.nci.cagrid.cananolab.stubs.GetFilesByCompositionInfoIdResponse boxedResult = portType.getFilesByCompositionInfoId(params);
    return boxedResult.getFile();
    }
  }

  public gov.nih.nci.cananolab.domain.common.Protocol getProtocolByCharacterizationId(java.lang.String charId) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getProtocolByCharacterizationId");
    gov.nih.nci.cagrid.cananolab.stubs.GetProtocolByCharacterizationIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetProtocolByCharacterizationIdRequest();
    params.setCharId(charId);
    gov.nih.nci.cagrid.cananolab.stubs.GetProtocolByCharacterizationIdResponse boxedResult = portType.getProtocolByCharacterizationId(params);
    return boxedResult.getProtocol();
    }
  }

  public java.lang.String[] getSampleIds(java.lang.String sampleName, java.lang.String samplePointOfContact,java.lang.String[] nanomaterialEntityClassNames,java.lang.String[] functionalizingEntityClassNames,java.lang.String[] functionClassNames,java.lang.String[] characterizationClassNames,java.lang.String[] words) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getSampleIds");
    gov.nih.nci.cagrid.cananolab.stubs.GetSampleIdsRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetSampleIdsRequest();
    params.setSampleName(sampleName);
    params.setSamplePointOfContact(samplePointOfContact);
    params.setNanomaterialEntityClassNames(nanomaterialEntityClassNames);
    params.setFunctionalizingEntityClassNames(functionalizingEntityClassNames);
    params.setFunctionClassNames(functionClassNames);
    params.setCharacterizationClassNames(characterizationClassNames);
    params.setWords(words);
    gov.nih.nci.cagrid.cananolab.stubs.GetSampleIdsResponse boxedResult = portType.getSampleIds(params);
    return boxedResult.getResponse();
    }
  }

  public java.lang.String[] getPublicationIdsBy(java.lang.String publicationTitle,java.lang.String publicationCategory,java.lang.String sampleName,java.lang.String[] researchAreas,java.lang.String[] keywords,java.lang.String pubMedId,java.lang.String digitalObjectId,java.lang.String[] authors,java.lang.String[] nanomaterialEntityClassNames,java.lang.String[] functionalizingEntityClassNames,java.lang.String[] functionClassNames) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPublicationIdsBy");
    gov.nih.nci.cagrid.cananolab.stubs.GetPublicationIdsByRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetPublicationIdsByRequest();
    params.setPublicationTitle(publicationTitle);
    params.setPublicationCategory(publicationCategory);
    params.setSampleName(sampleName);
    params.setResearchAreas(researchAreas);
    params.setKeywords(keywords);
    params.setPubMedId(pubMedId);
    params.setDigitalObjectId(digitalObjectId);
    params.setAuthors(authors);
    params.setNanomaterialEntityClassNames(nanomaterialEntityClassNames);
    params.setFunctionalizingEntityClassNames(functionalizingEntityClassNames);
    params.setFunctionClassNames(functionClassNames);
    gov.nih.nci.cagrid.cananolab.stubs.GetPublicationIdsByResponse boxedResult = portType.getPublicationIdsBy(params);
    return boxedResult.getResponse();
    }
  }

  public gov.nih.nci.cananolab.domain.common.PointOfContact[] getOtherPointOfContactsBySampleId(java.lang.String sampleId) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getOtherPointOfContactsBySampleId");
    gov.nih.nci.cagrid.cananolab.stubs.GetOtherPointOfContactsBySampleIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetOtherPointOfContactsBySampleIdRequest();
    params.setSampleId(sampleId);
    gov.nih.nci.cagrid.cananolab.stubs.GetOtherPointOfContactsBySampleIdResponse boxedResult = portType.getOtherPointOfContactsBySampleId(params);
    return boxedResult.getPointOfContact();
    }
  }

  public java.lang.String[] getSampleNamesByPublicationId(java.lang.String publicationId) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getSampleNamesByPublicationId");
    gov.nih.nci.cagrid.cananolab.stubs.GetSampleNamesByPublicationIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetSampleNamesByPublicationIdRequest();
    params.setPublicationId(publicationId);
    gov.nih.nci.cagrid.cananolab.stubs.GetSampleNamesByPublicationIdResponse boxedResult = portType.getSampleNamesByPublicationId(params);
    return boxedResult.getResponse();
    }
  }

  public gov.nih.nci.cananolab.domain.common.Publication[] getPublicationsBySampleId(java.lang.String sampleId) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPublicationsBySampleId");
    gov.nih.nci.cagrid.cananolab.stubs.GetPublicationsBySampleIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetPublicationsBySampleIdRequest();
    params.setSampleId(sampleId);
    gov.nih.nci.cagrid.cananolab.stubs.GetPublicationsBySampleIdResponse boxedResult = portType.getPublicationsBySampleId(params);
    return boxedResult.getPublication();
    }
  }

  public gov.nih.nci.cananolab.domain.common.PointOfContact getPrimaryPointOfContactBySampleId(java.lang.String sampleId) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPrimaryPointOfContactBySampleId");
    gov.nih.nci.cagrid.cananolab.stubs.GetPrimaryPointOfContactBySampleIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetPrimaryPointOfContactBySampleIdRequest();
    params.setSampleId(sampleId);
    gov.nih.nci.cagrid.cananolab.stubs.GetPrimaryPointOfContactBySampleIdResponse boxedResult = portType.getPrimaryPointOfContactBySampleId(params);
    return boxedResult.getPointOfContact();
    }
  }

  public java.lang.String[] getSampleViewStrs(java.lang.String sampleName) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getSampleViewStrs");
    gov.nih.nci.cagrid.cananolab.stubs.GetSampleViewStrsRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetSampleViewStrsRequest();
    params.setSampleName(sampleName);
    gov.nih.nci.cagrid.cananolab.stubs.GetSampleViewStrsResponse boxedResult = portType.getSampleViewStrs(params);
    return boxedResult.getResponse();
    }
  }

  public gov.nih.nci.cananolab.domain.common.File getFileByProtocolId(
			java.lang.String protocolId) throws RemoteException {
		synchronized (portTypeMutex) {
			configureStubSecurity((Stub) portType, "getFileByProtocolId");
			gov.nih.nci.cagrid.cananolab.stubs.GetFileByProtocolIdRequest params = new gov.nih.nci.cagrid.cananolab.stubs.GetFileByProtocolIdRequest();
			params.setProtocolId(protocolId);
			gov.nih.nci.cagrid.cananolab.stubs.GetFileByProtocolIdResponse boxedResult = portType
					.getFileByProtocolId(params);
			return boxedResult.getFile();
		}
  }
}
